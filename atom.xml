<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Crowser&#39;s Blog</title>
  
  <subtitle>To.Live.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://crowser.me/"/>
  <updated>2019-02-27T16:42:44.855Z</updated>
  <id>https://crowser.me/</id>
  
  <author>
    <name>crowser</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>别再裸字符串处理上走太远：对手写SQL说不</title>
    <link href="https://crowser.me/2019/02/28/2019/%E5%88%AB%E5%86%8D%E8%A3%B8%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86%E4%B8%8A%E8%B5%B0%E5%A4%AA%E8%BF%9C%EF%BC%9A%E5%AF%B9%E6%89%8B%E5%86%99SQL%E8%AF%B4%E4%B8%8D/"/>
    <id>https://crowser.me/2019/02/28/2019/别再裸字符串处理上走太远：对手写SQL说不/</id>
    <published>2019-02-27T16:17:58.000Z</published>
    <updated>2019-02-27T16:42:44.855Z</updated>
    
    <content type="html"><![CDATA[<p>SQL作为访问和处理关系数据库的计算机标准语言, 无论用什么编程语言（Java、Python、C++……）编写程序，只要涉及到操作关系数据库，比如，一个电商网站需要把用户和商品信息存入数据库，或者一个手机游戏需要把用户的道具、通关信息存入数据库，都必须通过SQL来完成。</p><p>然后当SQL语句出现在程序中时却不那么尽如人意, 他有诸多问题, 笼统地讲就是他对于编程语言来说不够抽象(无法控制sql语句的复杂度).</p><a id="more"></a><blockquote><p>以下内容引用自 <a href="https://www.zlovezl.cn/articles/tips-on-numbers-and-strings/" target="_blank" rel="noopener">Python 工匠：使用数字与字符串的技巧</a></p></blockquote><p>所有人都写过这样的代码。有时候我们需要拼接一大段发给用户的告警信息，有时我们需要构造一大段发送给数据库的 SQL 查询语句，就像下面这样：</p><pre><code>def fetch_users(conn, min_level=None, gender=None, has_membership=False, sort_field=&quot;created&quot;):    &quot;&quot;&quot;获取用户列表    :param int min_level: 要求的最低用户级别，默认为所有级别    :param int gender: 筛选用户性别，默认为所有性别    :param int has_membership: 筛选所有会员/非会员用户，默认非会员    :param str sort_field: 排序字段，默认为按 created &quot;用户创建日期&quot;    :returns: 列表：[(User ID, User Name), ...]    &quot;&quot;&quot;    # 一种古老的 SQL 拼接技巧，使用 &quot;WHERE 1=1&quot; 来简化字符串拼接操作    # 区分查询 params 来避免 SQL 注入问题    statement = &quot;SELECT id, name FROM users WHERE 1=1&quot;    params = []    if min_level is not None:        statement += &quot; AND level &gt;= ?&quot;        params.append(min_level)    if gender is not None:        statement += &quot; AND gender &gt;= ?&quot;        params.append(gender)    if has_membership:        statement += &quot; AND has_membership == true&quot;    else:        statement += &quot; AND has_membership == false&quot;    statement += &quot; ORDER BY ?&quot;    params.append(sort_field)    return list(conn.execute(statement, params))</code></pre><p>我们之所以用这种方式拼接出需要的字符串 - 在这里是 SQL 语句 - 是因为这样做简单、直接，符合直觉。但是这样做最大的问题在于：随着函数逻辑变得更复杂，这段拼接代码会变得容易出错、难以扩展。事实上，上面这段 Demo 代码也只是仅仅做到看上去没有明显的 bug 而已 （谁知道有没有其他隐藏问题）。</p><p>其实，对于 SQL 语句这种结构化、有规则的字符串，用对象化的方式构建和编辑它才是更好的做法。下面这段代码用 SQLAlchemy 模块完成了同样的功能：</p><pre><code>def fetch_users_v2(conn, min_level=None, gender=None, has_membership=False, sort_field=&quot;created&quot;):    &quot;&quot;&quot;获取用户列表    &quot;&quot;&quot;    query = select([users.c.id, users.c.name])    if min_level is not None:        query = query.where(users.c.level &gt;= min_level)    if gender is not None:        query = query.where(users.c.gender == gender)    query = query.where(users.c.has_membership == has_membership).order_by(users.c[sort_field])    return list(conn.execute(query))</code></pre><p>上面的 fetch_users_v2 函数更短也更好维护，而且根本不需要担心 SQL 注入问题。所以，当你的代码中出现复杂的裸字符串处理逻辑时，请试着用下面的方式替代它：</p><pre><code>Q: 目标/源字符串是结构化的，遵循某种格式吗？</code></pre><ul><li>是：找找是否已经有开源的对象化模块操作它们，或是自己写一个<ul><li>SQL：SQLAlchemy</li><li>XML：lxml</li><li>JSON、YAML …</li></ul></li><li>否：尝试使用模板引擎而不是复杂字符串处理逻辑来达到目的<ul><li>Jinja2</li><li>Mako</li><li>Mustache</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SQL作为访问和处理关系数据库的计算机标准语言, 无论用什么编程语言（Java、Python、C++……）编写程序，只要涉及到操作关系数据库，比如，一个电商网站需要把用户和商品信息存入数据库，或者一个手机游戏需要把用户的道具、通关信息存入数据库，都必须通过SQL来完成。&lt;/p&gt;
&lt;p&gt;然后当SQL语句出现在程序中时却不那么尽如人意, 他有诸多问题, 笼统地讲就是他对于编程语言来说不够抽象(无法控制sql语句的复杂度).&lt;/p&gt;
    
    </summary>
    
    
      <category term="技巧" scheme="https://crowser.me/tags/%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>什么是循环导入</title>
    <link href="https://crowser.me/2018/12/05/2018/%E4%BB%80%E4%B9%88%E6%98%AF%E5%BE%AA%E7%8E%AF%E5%AF%BC%E5%85%A5/"/>
    <id>https://crowser.me/2018/12/05/2018/什么是循环导入/</id>
    <published>2018-12-05T14:53:46.000Z</published>
    <updated>2018-12-05T15:05:21.854Z</updated>
    
    <content type="html"><![CDATA[<p>一句话解释这个问题: 在当前模块执行<code>import</code>的这些模块中, 导入了当前模块未创建的对象</p><a id="more"></a><p><strong>很啰嗦的解释这个问题:</strong></p><blockquote><p>我们知道,程序是从上至下运行的.<br><code>python</code>程序在<code>import</code>中去创建各个模块的名字空间, 且本模块未被执行的代码所代表的对象是没有被创建的.<br>当其他模块引用了当前模块未被创建的对象时就会出现错误, 这就是循环导入.</p></blockquote><p><strong>解决方法</strong></p><ol><li>等…..当前模块的对象创建完成后再导入有循环导入冲突的模块</li><li>两个有循环导入冲突的模块都互相导入对方的模块, 不导入模块里面的对象</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一句话解释这个问题: 在当前模块执行&lt;code&gt;import&lt;/code&gt;的这些模块中, 导入了当前模块未创建的对象&lt;/p&gt;
    
    </summary>
    
    
      <category term="python" scheme="https://crowser.me/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>年轻人经济随想</title>
    <link href="https://crowser.me/2018/11/04/2018/%E5%B9%B4%E8%BD%BB%E4%BA%BA%E7%BB%8F%E6%B5%8E%E9%9A%8F%E6%83%B3/"/>
    <id>https://crowser.me/2018/11/04/2018/年轻人经济随想/</id>
    <published>2018-11-03T17:13:28.000Z</published>
    <updated>2018-11-03T17:20:14.241Z</updated>
    
    <content type="html"><![CDATA[<p>自问: 上了年纪的程序员会失业?</p><p>自答: 其实各行各业的人上了年纪都会失业.</p><p>结论: 社会经济的主力是年轻人</p><hr><p>自问: 如何才能不回因为年纪增长被社会经济抛弃?</p><p>自答:</p><blockquote><p>从年轻人手中获利<br>利用年轻人获利<br>从经济社会发展中获利</p></blockquote><p><strong>结论: 年轻人是社会发展的主要推动力, 年轻人是社会压榨的主要对象.</strong></p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自问: 上了年纪的程序员会失业?&lt;/p&gt;
&lt;p&gt;自答: 其实各行各业的人上了年纪都会失业.&lt;/p&gt;
&lt;p&gt;结论: 社会经济的主力是年轻人&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;自问: 如何才能不回因为年纪增长被社会经济抛弃?&lt;/p&gt;
&lt;p&gt;自答:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;从年轻人手中获利&lt;br&gt;利用年轻人获利&lt;br&gt;从经济社会发展中获利&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;结论: 年轻人是社会发展的主要推动力, 年轻人是社会压榨的主要对象.&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="观点与感想" scheme="https://crowser.me/tags/%E8%A7%82%E7%82%B9%E4%B8%8E%E6%84%9F%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>探索 Python 函数对象参数默认值陷阱</title>
    <link href="https://crowser.me/2018/08/23/2018/%E6%8E%A2%E7%B4%A2-Python-%E5%87%BD%E6%95%B0%E5%AF%B9%E8%B1%A1%E5%8F%82%E6%95%B0%E9%BB%98%E8%AE%A4%E5%80%BC%E9%99%B7%E9%98%B1/"/>
    <id>https://crowser.me/2018/08/23/2018/探索-Python-函数对象参数默认值陷阱/</id>
    <published>2018-08-23T14:43:14.000Z</published>
    <updated>2018-12-05T15:05:21.856Z</updated>
    
    <content type="html"><![CDATA[<p><strong>现在有一下两个程序,那么他们打印的都是什么呢?</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dict_updater</span><span class="params">(k, v, dic=&#123;&#125;)</span>:</span></span><br><span class="line">    dic[k] = v</span><br><span class="line">    print(dic)</span><br><span class="line"></span><br><span class="line">dict_updater(<span class="string">'one'</span>, <span class="number">1</span>)</span><br><span class="line">dict_updater(<span class="string">'two'</span>, <span class="number">2</span>)</span><br><span class="line">dict_updater(<span class="string">'three'</span>, <span class="number">3</span>, &#123;&#125;)</span><br><span class="line">dict_update(<span class="string">'four'</span>,<span class="number">4</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo</span><span class="params">(k, v)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dict_updater</span><span class="params">(k, v, dic=&#123;&#125;)</span>:</span></span><br><span class="line">   dic[k] = v</span><br><span class="line">    print(dic)</span><br><span class="line">    dict_updater(k, v)</span><br><span class="line"></span><br><span class="line">demo(<span class="string">'one'</span>, <span class="number">1</span>)</span><br><span class="line">demo(<span class="string">'two'</span>, <span class="number">2</span>)</span><br><span class="line">demo(<span class="string">'three'</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="为了弄清楚他们打印的是什么-让我们先来了解一下以下几个问题"><a href="#为了弄清楚他们打印的是什么-让我们先来了解一下以下几个问题" class="headerlink" title="为了弄清楚他们打印的是什么,让我们先来了解一下以下几个问题:"></a>为了弄清楚他们打印的是什么,让我们先来了解一下以下几个问题:</h1><h4 id="1-函数对象dict-updater在何时构造并初始化"><a href="#1-函数对象dict-updater在何时构造并初始化" class="headerlink" title="1. 函数对象dict_updater在何时构造并初始化"></a>1. 函数对象<code>dict_updater</code>在何时构造并初始化</h4><ul><li><p>如果函数所在文件是main文件,则在main执行到<code>dict_updater</code>所在行时初始化</p></li><li><p>在第一次 import 时进行</p></li></ul><p>之后函数对象被关联到当前的命名空间  引用计数+1</p><h4 id="2-函数对象如何存储默认参数"><a href="#2-函数对象如何存储默认参数" class="headerlink" title="2. 函数对象如何存储默认参数"></a>2. 函数对象如何存储默认参数</h4><p>默认值在函数对象创建时生成, 保存在 <code>__defaults__</code>, 为每次调用所共享.<br>当显示给默认参数赋值时,此时不再调用<code>__defaults__</code>的默认值,而是把默认变量名关联到新的传参对象.<br>但是并没有改变<code>__defaults__</code>的值,因为他是<code>tuple</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(a, x=[])</span>:</span></span><br><span class="line">    x.append(a)</span><br><span class="line">    print(x)</span><br><span class="line">    print(test.__defaults__)</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: test.__defaults__</span><br><span class="line">Out[<span class="number">2</span>]: ([],)</span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: type(test.__defaults__)</span><br><span class="line">Out[<span class="number">3</span>]: tuple</span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: test(<span class="number">1</span>)</span><br><span class="line">[<span class="number">1</span>]</span><br><span class="line">([<span class="number">1</span>],)</span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]: test(<span class="number">2</span>)</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">([<span class="number">1</span>, <span class="number">2</span>],)</span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: test(<span class="number">3</span>, [])</span><br><span class="line">[<span class="number">3</span>]</span><br><span class="line">([<span class="number">1</span>, <span class="number">2</span>],)</span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: test(<span class="number">4</span>)</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>]</span><br><span class="line">([<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>],)</span><br></pre></td></tr></table></figure><p>关于<code>tuple</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">11</span>]: l = []</span><br><span class="line"></span><br><span class="line">In [<span class="number">12</span>]: t = (l,)</span><br><span class="line"></span><br><span class="line">In [<span class="number">13</span>]: t</span><br><span class="line">Out[<span class="number">13</span>]: ([],)</span><br><span class="line"></span><br><span class="line">In [<span class="number">14</span>]: l.append(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">15</span>]: l</span><br><span class="line">Out[<span class="number">15</span>]: [<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">16</span>]: t</span><br><span class="line">Out[<span class="number">16</span>]: ([<span class="number">1</span>],)</span><br><span class="line"></span><br><span class="line">In [<span class="number">17</span>]: l.append(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">18</span>]: t</span><br><span class="line">Out[<span class="number">18</span>]: ([<span class="number">1</span>, <span class="number">2</span>],)</span><br><span class="line"></span><br><span class="line">In [<span class="number">19</span>]: l = []</span><br><span class="line"></span><br><span class="line">In [<span class="number">20</span>]: t</span><br><span class="line">Out[<span class="number">20</span>]: ([<span class="number">1</span>, <span class="number">2</span>],)</span><br><span class="line"></span><br><span class="line">In [<span class="number">21</span>]: t[<span class="number">0</span>]</span><br><span class="line">Out[<span class="number">21</span>]: [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">22</span>]: t[<span class="number">0</span>] = []</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">TypeError                                 Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input<span class="number">-22</span><span class="number">-33351</span>fe06dab&gt; <span class="keyword">in</span> &lt;module&gt;()</span><br><span class="line">----&gt; 1 t[0] = []</span><br><span class="line"></span><br><span class="line">TypeError: <span class="string">'tuple'</span> object does <span class="keyword">not</span> support item assignment</span><br></pre></td></tr></table></figure></p><h4 id="3-可变对象与不可变对象"><a href="#3-可变对象与不可变对象" class="headerlink" title="3. 可变对象与不可变对象"></a>3. 可变对象与不可变对象</h4><ol><li>可变类型（列表、字典）</li></ol><p>　　　　　　所谓可变对象是指，对象的内容可变，而不可变对象是指对象内容不可变。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>aList = [<span class="string">'java'</span>,<span class="number">66</span>,<span class="number">88</span>,<span class="string">'python'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aList</span><br><span class="line">[<span class="string">'java'</span>, <span class="number">66</span>, <span class="number">88</span>, <span class="string">'python'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aList[<span class="number">2</span>]</span><br><span class="line"><span class="number">88</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(aList)  <span class="comment">#注意观察id值</span></span><br><span class="line"><span class="number">48255112L</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aList[<span class="number">2</span>] = aList[<span class="number">2</span>] + <span class="number">12</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aList[<span class="number">3</span>] = <span class="string">"python2"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aList</span><br><span class="line">[<span class="string">'java'</span>, <span class="number">66</span>, <span class="number">100</span>, <span class="string">'python2'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(aList)</span><br><span class="line"><span class="number">48255112L</span>　　<span class="comment">#注意观察id值</span></span><br></pre></td></tr></table></figure></p><ol start="2"><li>不可变类型（数字、字符串、元祖）</li></ol><p>　　　　注意喽：下面的例子中，事实上是一个新对象被创建，然后它取代了旧对象。新创建的对象被关联到原来的变量名，旧对象被丢弃，垃圾回收器会在适当的时机回收这些对象。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>v1 = <span class="string">"python"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(v1)</span><br><span class="line"><span class="number">31631080L</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>v1 = <span class="string">"java"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(v1)</span><br><span class="line"><span class="number">31632240L</span>  <span class="comment">#由于str是不可变的，重新创建了java对象，随之id改变，旧对象python会在某个时刻被回收</span></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>v2 = <span class="number">12</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>v3 = <span class="number">12</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(v2),id(v3)　　<span class="comment">#同指同一内存区域，id相同</span></span><br><span class="line">(<span class="number">31489840L</span>, <span class="number">31489840L</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>v2 += <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>v2</span><br><span class="line"><span class="number">13</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(v2),id(v3)</span><br><span class="line">(<span class="number">31489816L</span>, <span class="number">31489840L</span>)</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></p><h4 id="4-函数对象的生命周期"><a href="#4-函数对象的生命周期" class="headerlink" title="4. 函数对象的生命周期"></a>4. 函数对象的生命周期</h4><p>函数算是 <code>function</code> 的实例。把 <code>def func()</code> 理解成 <code>func = new Function()</code> ，此时该函数实例计数是 1 ，如果此时删除其引用 <code>del func</code> 或者给 <code>func</code>赋值其他值，致使函数对象引用计数为0，那它就被回收了，同理的 <code>class Test(object)</code> 视为 <code>Test = new type()</code>，它的引用计数同一般普通的变量计算方式一样，没什么特别的。所以只要引用计数不为 0，那它的生命周期就是整个程序的生命周期。</p><p>如果是一个全局函数,那么不可避免的需要直接或间接被<code>main()</code>函数引用, 只有在main结束后引用计数才会归零,被垃圾回收.</p><p>如果是一个内部函数(不考虑高阶函数), 在外部函数执行完之后,该函数引用计数会被写为0,被垃圾回收.</p><p>我们通过观察进程内存验证一下：<br><img src="/images/2018_08_23_02.png" alt=""><br><img src="/images/2018_08_23_01.png" alt=""></p><h4 id="解答："><a href="#解答：" class="headerlink" title="解答："></a>解答：</h4><p>好了，既然以上几个问题都弄懂了，自然也就知道打印什么了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;现在有一下两个程序,那么他们打印的都是什么呢?&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;dict_updater&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(k, v, dic=&amp;#123;&amp;#125;)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dic[k] = v&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(dic)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dict_updater(&lt;span class=&quot;string&quot;&gt;&#39;one&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dict_updater(&lt;span class=&quot;string&quot;&gt;&#39;two&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dict_updater(&lt;span class=&quot;string&quot;&gt;&#39;three&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &amp;#123;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dict_update(&lt;span class=&quot;string&quot;&gt;&#39;four&#39;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;demo&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(k, v)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;dict_updater&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(k, v, dic=&amp;#123;&amp;#125;)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   	dic[k] = v&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	print(dic)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dict_updater(k, v)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;demo(&lt;span class=&quot;string&quot;&gt;&#39;one&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;demo(&lt;span class=&quot;string&quot;&gt;&#39;two&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;demo(&lt;span class=&quot;string&quot;&gt;&#39;three&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="python" scheme="https://crowser.me/tags/python/"/>
    
  </entry>
  
</feed>
